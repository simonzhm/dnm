/*
 * Alipay.com Inc.
 * Copyright (c) 2004 All Rights Reserved.
 */
package com.dnm.core.common.dal.ibatis;import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;import com.dnm.core.common.dal.daointerface.DnmPlatformUserAccountDAO;// auto generated importsimport com.dnm.core.common.dal.dataobject.DnmPlatformUserAccountDO;import org.springframework.dao.DataAccessException;import java.util.Map;import java.util.HashMap;/** * An ibatis based implementation of dao interface <tt>com.dnm.core.common.dal.daointerface.DnmPlatformUserAccountDAO</tt>. * * This file is generated by <tt>iwallet-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>iwallet</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/dnm_platform_user_account.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>iwallet-dalgen</tt> 
 * to generate this file.
 *
 * @author Cheng Li
 */public class IbatisDnmPlatformUserAccountDAO extends SqlMapClientDaoSupport implements DnmPlatformUserAccountDAO {	/**
	 *  Insert one <tt>DnmPlatformUserAccountDO</tt> object to DB table <tt>dnm_platform_user_account</tt>, return primary key
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into dnm_platform_user_account(account_id,sub_account_type,platform_user_id) values (?, ?, ?)</tt>
	 *
	 *	@param dnmPlatformUserAccount
	 *	@return String
	 *	@throws DataAccessException
	 */	 
    public String insert(DnmPlatformUserAccountDO dnmPlatformUserAccount) throws DataAccessException {
    	if (dnmPlatformUserAccount == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-DNM-PLATFORM-USER-ACCOUNT-INSERT", dnmPlatformUserAccount);

        return dnmPlatformUserAccount.getAccountId();
    }		/**
	 *  Query DB table <tt>dnm_platform_user_account</tt> for records.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select account_id, sub_account_type, platform_user_id from dnm_platform_user where (account_id = ?)</tt>
	 *
	 *	@param accountId
	 *	@return DnmPlatformUserAccountDO
	 *	@throws DataAccessException
	 */	 
    public DnmPlatformUserAccountDO load(String accountId) throws DataAccessException {

        return (DnmPlatformUserAccountDO) getSqlMapClientTemplate().queryForObject("MS-DNM-PLATFORM-USER-ACCOUNT-LOAD", accountId);

    }		/**
	 *  Query DB table <tt>dnm_platform_user_account</tt> for records.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select account_id, sub_account_type, platform_user_id from dnm_platform_user where ((platform_user_id = ?) AND (sub_account_type = ?))</tt>
	 *
	 *	@param platformUserId
	 *	@param subAccountType
	 *	@return DnmPlatformUserAccountDO
	 *	@throws DataAccessException
	 */	 
    public DnmPlatformUserAccountDO loadByUserAndType(String platformUserId, String subAccountType) throws DataAccessException {
        Map param = new HashMap();

        param.put("platformUserId", platformUserId);
        param.put("subAccountType", subAccountType);

        return (DnmPlatformUserAccountDO) getSqlMapClientTemplate().queryForObject("MS-DNM-PLATFORM-USER-ACCOUNT-LOAD-BY-USER-AND-TYPE", param);

    }	}	